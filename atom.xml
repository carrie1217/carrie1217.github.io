<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Carrie博客</title>
  <subtitle>如果说时间是最宝贵的东西，那么浪费时间就是最大的挥霍。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://carrie1217.github.io/"/>
  <updated>2016-12-06T02:26:12.000Z</updated>
  <id>https://carrie1217.github.io/</id>
  
  <author>
    <name>Carrie</name>
    <email>540636973@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图标尺寸</title>
    <link href="https://carrie1217.github.io/2016/12/05/%E5%9B%BE%E6%A0%87%E5%B0%BA%E5%AF%B8/"/>
    <id>https://carrie1217.github.io/2016/12/05/图标尺寸/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-06T02:26:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pixel-Densities"><a href="#Pixel-Densities" class="headerlink" title="Pixel Densities"></a>Pixel Densities</h2><p>Android icons require five separate sizes for different screen pixel densities. Icons for lower resolution are created automatically from the baseline.</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>尺寸</th>
<th>dpi</th>
<th>倍数</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>mdpi (Baseline)</td>
<td>160 dpi</td>
<td>1×</td>
<td></td>
</tr>
<tr>
<td>hdpi</td>
<td>240 dpi</td>
<td>1.5×</td>
<td></td>
</tr>
<tr>
<td>xhdpi</td>
<td>320 dpi</td>
<td>2×</td>
<td></td>
</tr>
<tr>
<td>xxhdpi</td>
<td>490 dpi</td>
<td>3×</td>
<td></td>
</tr>
<tr>
<td>xxxhdpi</td>
<td>640 dpi</td>
<td>4×</td>
</tr>
</tbody>
</table>
<h2 id="Launcher-icons"><a href="#Launcher-icons" class="headerlink" title="Launcher icons"></a>Launcher icons</h2><table>
<thead>
<tr>
<th>Sizes (px)</th>
<th>Format and naming</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>48 × 48 (mdpi)</td>
<td>.png</td>
<td></td>
</tr>
<tr>
<td>72 × 72 (hdpi)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>96 × 96 (xhdpi)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>144 × 144 (xxhdpi)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>192 × 192 (xxxhdpi)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>512 × 512 (Google Play store)</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>NOTO:</strong> Three-dimensional, front view, with a slight perspective as if viewed from above, so that users perceive some depth.</p>
<h2 id="Action-bar-Dialog-amp-Tab-icons"><a href="#Action-bar-Dialog-amp-Tab-icons" class="headerlink" title="Action bar, Dialog &amp; Tab icons"></a>Action bar, Dialog &amp; Tab icons</h2><table>
<thead>
<tr>
<th>Sizes (px)</th>
<th>Format and naming</th>
</tr>
</thead>
<tbody>
<tr>
<td>24 × 24 area in 32 × 32 (mdpi)</td>
<td>.png</td>
</tr>
<tr>
<td>36 × 36 area in 48 × 48 (hdpi)</td>
<td></td>
</tr>
<tr>
<td>48 × 48 area in 64 × 64 (xhdpi)</td>
<td></td>
</tr>
<tr>
<td>72 × 72 area in 96 × 96 (xxhdpi)</td>
<td></td>
</tr>
<tr>
<td>96 × 96 area in 128 × 128 (xxxhdpi)</td>
</tr>
</tbody>
</table>
<p><strong>NOTE:</strong> These icons are used in the action bar menu. The first number is the size of the icon area, and the second is file size.</p>
<h2 id="Small-Contextual-Icons"><a href="#Small-Contextual-Icons" class="headerlink" title="Small Contextual Icons"></a>Small Contextual Icons</h2><table>
<thead>
<tr>
<th>Sizes (px)</th>
<th>Format and naming</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>16 × 16 (mdpi)</td>
<td>.png</td>
<td></td>
</tr>
<tr>
<td>24 × 24 (hdpi)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>32 × 32 (xhdpi)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>48 × 48 (xxhdpi)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>64 × 64 (xxxhdpi)</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Notes:</strong>  Small icons are used to surface actions and/or provide status for specific items. For example, in the Gmail app, each message has a star icon that marks the message as important.</p>
<h2 id="Notification-icons"><a href="#Notification-icons" class="headerlink" title="Notification icons"></a>Notification icons</h2><table>
<thead>
<tr>
<th>Sizes (px)</th>
<th>Format and naming</th>
</tr>
</thead>
<tbody>
<tr>
<td>22 × 22 area in 24 × 24 (mdpi)</td>
<td>.png</td>
</tr>
<tr>
<td>33 × 33 area in 36 × 36 (hdpi)</td>
<td></td>
</tr>
<tr>
<td>44 × 44 area in 48 × 48 (xhdpi)</td>
<td></td>
</tr>
<tr>
<td>66 × 66 area in 72 × 72 (xxhdpi)</td>
<td></td>
</tr>
<tr>
<td>88 × 88 area in 96 × 96 (xxxhdpi)</td>
</tr>
</tbody>
</table>
<p><strong>Notes:</strong> These are used to represent application notifications in the status bar. They should be flat (no gradients), white and face-on perspective</p>
<p>See also <a href="http://iconhandbook.co.uk/reference/chart/android/" target="_blank" rel="external">http://iconhandbook.co.uk/reference/chart/android/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pixel-Densities&quot;&gt;&lt;a href=&quot;#Pixel-Densities&quot; class=&quot;headerlink&quot; title=&quot;Pixel Densities&quot;&gt;&lt;/a&gt;Pixel Densities&lt;/h2&gt;&lt;p&gt;Android icons require five separate sizes for different screen pixel densities. Icons for lower resolution are created automatically from the baseline.&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://carrie1217.github.io/categories/Android/"/>
    
    
      <category term="size" scheme="https://carrie1217.github.io/tags/size/"/>
    
  </entry>
  
  <entry>
    <title>Android最佳实践</title>
    <link href="https://carrie1217.github.io/2016/12/05/Android%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://carrie1217.github.io/2016/12/05/Android最佳实践/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-06T02:27:48.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>定义变量时，UI变量单独放一块，数据变量放一块，空行隔开不要掺杂在一块。</li>
<li><p>使用UIL时，如果只是简单加载一个图片的bitmap，可以使用SimpleImageLoadingListener方法，而不是ImageLoadingListener。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">imageLoader.displayImage(detailModel.getData().getPicture(), </div><div class="line">                        headerBg, </div><div class="line">                        new SimpleImageLoadingListener() &#123;</div><div class="line"></div><div class="line">                    @Override</div><div class="line">                    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) &#123;</div><div class="line">                        headerBg.setImageBitmap(loadedImage);</div><div class="line">                        setBitmap(loadedImage);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Activity或Fragment中对adapter.updateDataSet(data);时，<code>notifyDataSetChanged</code>的操作放在adapter的updateDataSet方法内执行。</p>
<a id="more"></a>
</li>
<li><p>外部启动activity时，调用该activity的静态方法，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static Intent newInstance(Context context, int tabIndexIfNeeded) &#123;</div><div class="line">    Intent intent = new Intent(context, UserGuideActivity.class);</div><div class="line">    intent.putExtra(Constants.KEY_WHICH_TAB, tabIndexIfNeeded);</div><div class="line">    return intent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而外表类实例化该activity的intent的方法是<br><code>final Intent intent = UserGuideActivity.newInstance(this, UserGuideConstants.OPEN_BIZ_AREAS_GUIDE_VIEW);</code></p>
<p>类似地，启动fragment时，调用该fragment的静态方法，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static GuiseFragment newInstance(NGGuiseGroup guiseGroup) &#123;</div><div class="line">     GuiseFragment fragment = new GuiseFragment();</div><div class="line">     Bundle bundle = new Bundle();</div><div class="line">     bundle.putSerializable(EXTRA_GUISE_GROUP, guiseGroup);</div><div class="line">     fragment.setArguments(bundle);</div><div class="line">     return fragment;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>而外表类实例化该fragment的方法是<br><code>final GuiseFragment guiseFragment = GuiseFragment.newInstance(guiseGroup);</code></p>
</li>
<li><p>发起网络请求之前，务必检测网络状态，只有网络可用时才允许发起网络请求。网络不可用时提示网络连接错误，不允许发起网络请求。<br>例如  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if (!Utils.isNetworkOn()) &#123;</div><div class="line">    showShortToast(R.string.network_down);</div><div class="line">&#125; else</div><div class="line">  net.getArticlePostDetail(APIKey.KEY_ARTICLE_POST_DETAIL, token, String.valueOf(postId), String.valueOf(postType));</div></pre></td></tr></table></figure>
<p>特殊地，比如视频播放只允许wifi网络下才可以播放，非wifi网络下中断播放。</p>
</li>
</ol>
<h2 id="必读材料"><a href="#必读材料" class="headerlink" title="必读材料"></a>必读材料</h2><ol>
<li><a href="https://github.com/futurice/android-best-practices/blob/master/translations/Chinese/README.cn.md" target="_blank" rel="external">Android 开发最佳实践</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;定义变量时，UI变量单独放一块，数据变量放一块，空行隔开不要掺杂在一块。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用UIL时，如果只是简单加载一个图片的bitmap，可以使用SimpleImageLoadingListener方法，而不是ImageLoadingListener。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;imageLoader.displayImage(detailModel.getData().getPicture(), &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        headerBg, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        new SimpleImageLoadingListener() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    @Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        headerBg.setImageBitmap(loadedImage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        setBitmap(loadedImage);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Activity或Fragment中对adapter.updateDataSet(data);时，&lt;code&gt;notifyDataSetChanged&lt;/code&gt;的操作放在adapter的updateDataSet方法内执行。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开发规范</title>
    <link href="https://carrie1217.github.io/2016/12/05/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>https://carrie1217.github.io/2016/12/05/开发规范/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-06T02:25:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android 开发中类、方法、变量、资源等命名规则。</p>
<a id="more"></a>
<h1>开发规范</h1>

<ul>
<li><a href="#1">1.打印调试Log</a></li>
<li><a href="#2">2.代码缩进，使用四个空格代替一个Tab</a></li>
<li><a href="#3">3.命名类（classes）</a></li>
<li><a href="#4">4.命名接口（interface）</a></li>
<li><a href="#5">5.命名方法（methods）</a></li>
<li><a href="#6">6.命名变量（variables）</a></li>
<li><a href="#7">7.命名常量（constants）</a></li>
<li><a href="#8">8.命名资源文件（drawable folder）</a></li>
<li><a href="#9">9.命名资源布局文件（XML layout）</a></li>
<li><a href="#10">10.命名动画文件（anim folder）</a></li>
<li><a href="#11">11.命名资源ID（resourcesid）</a></li>
<li><a href="#12">12.命名layout中的id命名</a></li>
<li><a href="#13">13. 命名styles.xml</a></li>
<li><a href="#14">14.命名colors.xml</a></li>
<li><a href="#15">15.约定俗成的英文缩写</a></li>
<li><a href="#16">16.监听器使用匿名内部类</a></li>
<li><a href="#17">17.参考链接</a></li>
</ul>
<hr>
<h2 id="1">1. 打印调试Log</h2><br>DEBUG模式下打印调试log时，TAG的值统一使用如下格式<br><br>    public static final String TAG = MyInfoAty.class.getSimpleName();<br>​<br><br>打印log时，格式如下<br><br>    XLog.d(TAG, “上传图片返回=” + strMsg);<br>​<br><br><em>注意<code>d</code>表示打印debug信息，<code>e</code>表示打印error信息，相应地还有<code>v</code>, <code>i</code>, <code>wtf</code>等</em><br><h2 id="2">2. 代码缩进，使用四个空格代替一个Tab</h2><br><h2 id="3">3. 命名类（classes）</h2><br>采用大驼峰命名法，尽量避免缩写，除非该缩写是众所周知的， 比如HTML,URL，如果类名称中包含单词缩写，则单词缩写的每个字母均应大写<br><br>| 类                 | 描述                 | 例如                                      |<br>| —————– | —————— | ————————————— |<br>| activity 类        | Activity为后缀标识      | 欢迎页面类WelcomeActivity                    |<br>| fragment类         | Fragment为后缀标识      | 首页列表类HomeListFragment                   |<br>| Adapter类          | Adapte 为后缀标识       | 新闻详情适配器NewDetailAdapter                 |<br>| 解析类               | Hlr为后缀标识           | 首页解析类HomePosterHlr                      |<br>| 公共方法类             | Tools或Manager为后缀标识 | 线程池管理类：ThreadPoolManager,日志工具类：LogTools |<br>| 数据库类              | 以DBHelper后缀标识      | 新闻数据库：NewDBHelper                       |<br>| Service类          | 以Service为后缀标识      | 时间服务TimeService                         |<br>| BroadcastReceive类 | 以Broadcast为后缀标识    | 时间通知TimeBroadcast                       |<br>| ContentProvider类  | 以Provider为后缀标识     | 日记DiaryProvider                         |<br>| 直接写的共享基础类         | 以Base开头            | BaseActivity,BaseFragment               |<br><br><h2 id="4">4. 命名接口（interface）</h2><br>命名规则与类一样采用大驼峰命名法，多以Listener结尾，例如：interface LogoutDialogClickListener。<br><br><h2 id="5">5. 命名方法（methods）</h2><br>动词或动名词，采用小驼峰命名法例如:<code>onCreate()</code>, <code>run()</code><br><br>| 方法          | 说明                                       |<br>| ———– | —————————————- |<br>| initXX()    | 初始化相关方法,使用init为前缀标识，如初始化布局initView()     |<br>| isXX()      | checkXX()方法返回值为boolean型的请使用is或check为前缀标识 |<br>| getXX()     | 返回某个值的方法，使用get为前缀标识                      |<br>| processXX() | 对数据进行处理的方法，尽量使用process为前缀标识              |<br>| displayXX() | 弹出提示框和提示信息，使用display为前缀标识                |<br>| saveXX()    | 与保存数据相关的，使用sav为e前缀标识                     |<br>| resetXX()   | 对数据重组的，使用reset前缀标识                       |<br>| clearXX()   | 清除数据相关的                                  |<br>| removeXXX() | 清除数据相关的                                  |<br>| drawXXX()   | 绘制数据或效果相关的，使用draw前缀标识                    |<br><br><h2 id="6">6. 命名变量（variables）</h2><br>采用小驼峰命名法。类中控件名称与xml布局id去掉了Activity名称之后的部分保持一致。（组件缩写_view的逻辑名称）<br><br>比如： 组件<code>tv_share_coupon_detailed_txt_part_one</code>对应的变量名<code>tvDetailedTxtPartOne</code>，其中share_coupon是ShareCouponAcitivity中去掉Activity之后的类名。<br><br><h2 id="7">7. 命名常量（constants）</h2><br>全部大写，采用下划线命名法。例如：<code>MIN_WIDTH</code><br>其中常量名开头部分有如下约定<br><em> bundle中传入数值的键值，以<code>EXTRA_</code>开头
</em> startActivityForResult<br>- 传入的<code>REQUEST_CODE</code>参数，以<code>REQUEST_</code>开头<br>- 返回的结果使用系统默认的常量值即可<br><em> APIKey文件中的常量以<code>KEY_</code>开头
</em> 网络请求助手类<br>- 请求API的方法中<code>params</code>参数中的键值以<code>PARAM_</code>开头<br>- 返回结果码（一般是整型）常量以<code>RESULT_</code>开头，比如<code>RESULT_ERROR</code><br><em> 刷新的常量以<code>REFRESH_</code>开头以<code>TYPE</code>结尾
</em> 默认值常量名以<code>DEFAULT_</code>开头<br><br><h2 id="8">8. 命名资源文件（drawable folder）</h2><br>全部小写，采用下划线命名法，加前缀区分。<br>命名模式：activity名称<em>逻辑名称/common</em>逻辑名称<br><em>如果有多种形态(如按钮等)除外,如btn_xx.xml（selector)</em><br><br>| 名称              | 功能                       |<br>| ————— | ———————— |<br>| btn<em>xx          | 按钮图片使用btn</em>整体效果（selector） |<br>| btn_xx<em>normal   | 按钮图片使用btn</em>正常情况效果         |<br>| btn_xx<em>press    | 按钮图片使用btn</em>点击时候效果         |<br>| bg<em>head         | 背景图片使用bg</em>功能_说明           |<br>| def_search<em>cell | 默认图片使用def</em>功能_说明          |<br>| icon_more<em>help  | 图标图片使用icon</em>功能_说明         |<br>| seg_list<em>line   | 具有分隔特征的图片使用seg</em>功能_说明     |<br>| sel<em>ok          | 选择图标使用se</em>功能<em>说明           |<br><br>命名后缀<br><br>| 后缀       | 说明                                  |<br>| ——– | ———————————– |<br>| unit     | 在使用xml的tilemode来配图片时，element图片使用此后缀 |<br>| nor      | 图片的状态，代表普通状态                        |<br>| hl       | 图片的状态，代表高亮状态                        |<br>| press    | 图片的状态，代表按下状态                        |<br>| select   | 图片的状态，代表其所占的view被选中                 |<br>| unselect | 图片的状态，代表其所占的view没有被选中               |<br><br><h2 id="9">9. 命名布局文件（XML layout）</h2><br>全部小写，采用下划线命名法<br><br>1. Contentview命名, Activity默认布局，以去掉后缀的Activity类进行命名。不加后缀：activity</em>功能模块.xml，例如：activity_main.xml、activity_more.xml、activity<em>settings.xml。<br>2. Fragment命名：fragment</em>描述.xml，例如：fragment<em>main.xml。<br>3. Dialog命名：dialog</em>描述.xml，例如：dialog<em>hint.xml。<br>4. PopupWindow命名：ppw</em>描述.xml，例如：ppw_info.xml。<br>5. 列表项命名：list<em>item</em>描述.xml，例如：list_item<em>city.xml。<br>6. 包含项：include</em>模块.xml，例如：include_head.xml、include_bottom.xml。<br><br><h2 id="10">10. 命名动画文件（anim folder）</h2><br>全部小写，采用下划线命名法，加前缀区分<br><br>| 动画命名例子            | 规范写法    |<br>| —————– | ——- |<br>| fade_in           | 淡入      |<br>| fade_out          | 淡出      |<br>| push_down_in      | 从下方推入   |<br>| push_down_out     | 从下方推出   |<br>| push_left         | 推向左方    |<br>| slide_in_from_top | 从头部滑动进入 |<br>| zoom_enter        | 变形进入    |<br>| slide_in          | 滑动进入    |<br>| shrink_to<em>middle  | 中间缩小    |<br><br><h2 id="11">11. 命名资源ID（resourcesid）</h2><br>全部小写，采用下划线命名法<br><br>* strings.xml，dimen.xml等中的id命名<br>- 命名模式：activity名称</em>功能模块名称<em>逻辑名称/activity名称</em>逻辑名称/common<em>逻辑名称 （activity名称是指去掉了Acitivty字眼之后的名称）<br>- 最好可以使用common</em>逻辑名称，因为可以被共用<br>- dimen.xml中，使用activity名称注释，将文件内容区分开来<br>- strings.xml中，使用activity名称注释，将文件内容区分开来<br><br><h2 id="12">12. 命名layout中的id命名</h2><br>命名模式为：组件缩写_模块名称_view的逻辑名称<br><br><del>注意：页面组件名称应该和组件id名保持一致。</del><br>（目前java类中组件使用的是小驼峰命名法）<br><br>组件缩写详情如下<br><br>| 组件                   | 缩写             |<br>| ——————– | ————– |<br>| TextView             | tv             |<br>| ImageView            | iv             |<br>| Button               | btn            |<br>| listView             | lv             |<br>| CheckBox             | chk            |<br>| RadioButton          | rb             |<br>| LineaLayout          | ll             |<br>| RelativeLayout       | rl             |<br>| ImageButton          | imgbtn         |<br>| EditText             | et             |<br>| ExpandableList       | expandablelist |<br>| toggleButton         | togglebtn      |<br>| Spinner              | spinner        |<br>| ProgressBar          | progressbar    |<br>| WdbView              | webview        |<br>| LayoutView           | lv             |<br>| RelativeView         | rv             |<br>| analogClock          | analogclock    |<br>| DigtalClock          | digtalclock    |<br>| DatePicker           | datepicker     |<br>| TimePicker           | timepicker     |<br>| SeekBar              | seekbar        |<br>| AutoCompleteTextView | autocompletetv |<br>| ZoomControls         | zoomctls       |<br>| VideoView            | videoview      |<br>| RantingBar           | rantingbar     |<br>| Tab                  | tab            |<br>| ScrollView           | scrollview     |<br>| MapView              | mapview        |<br><br><h2 id="13">13. 命名styles.xml</h2><br>将layout中不断重现的style提炼出通用的style通用组件，放到styles.xml中<br><br><h2 id="14">14. 命名colors.xml</h2>

<ul>
<li>将layout中不断重现的color提炼出来，直接以颜色名称命名，从而方便共用和自定义主题样式</li>
<li>每个layout中特定使用的color值的命名，使用activity名称_颜色名称命名</li>
</ul>
<h2 id="15">15. 约定俗成的英文缩写</h2>

<p><strong>程序中使用单词缩写原则：不要用缩写，除非该缩写是约定俗成的。</strong></p>
<p>下面为常见的英文单词缩写:</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>缩写</th>
</tr>
</thead>
<tbody>
<tr>
<td>average</td>
<td>avg</td>
</tr>
<tr>
<td>background</td>
<td>bg（主要用于布局和子布局的背景）</td>
</tr>
<tr>
<td>buffer</td>
<td>buf</td>
</tr>
<tr>
<td>control</td>
<td>ctrl</td>
</tr>
<tr>
<td>delete</td>
<td>del</td>
</tr>
<tr>
<td>document</td>
<td>doc</td>
</tr>
<tr>
<td>error</td>
<td>err</td>
</tr>
<tr>
<td>escape</td>
<td>esc</td>
</tr>
<tr>
<td>increment</td>
<td>inc</td>
</tr>
<tr>
<td>infomation</td>
<td>info</td>
</tr>
<tr>
<td>initial</td>
<td>init</td>
</tr>
<tr>
<td>image</td>
<td>img</td>
</tr>
<tr>
<td>Internationalization</td>
<td>i18n</td>
</tr>
<tr>
<td>length</td>
<td>len</td>
</tr>
<tr>
<td>library</td>
<td>lib</td>
</tr>
<tr>
<td>message</td>
<td>msg</td>
</tr>
<tr>
<td>password-</td>
<td>pwd</td>
</tr>
<tr>
<td>position</td>
<td>pos</td>
</tr>
<tr>
<td>server</td>
<td>srv</td>
</tr>
<tr>
<td>string</td>
<td>str</td>
</tr>
<tr>
<td>temp</td>
<td>tmp</td>
</tr>
<tr>
<td>window</td>
<td>win</td>
</tr>
</tbody>
</table>
<h2 id="16">16.监听器使用匿名内部类</h2>

<p></p><h2 id="17">17. 参考链接</h2><p></p>
<ul>
<li><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android best practices</a></li>
<li><a href="http://blog.csdn.net/vipzjyno1/article/details/23542617" target="_blank" rel="external">http://blog.csdn.net/vipzjyno1/article/details/23542617</a></li>
<li><a href="http://www.zhihu.com/question/27227425" target="_blank" rel="external">http://www.zhihu.com/question/27227425</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android 开发中类、方法、变量、资源等命名规则。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://carrie1217.github.io/categories/Android/"/>
    
    
      <category term="rules" scheme="https://carrie1217.github.io/tags/rules/"/>
    
  </entry>
  
  <entry>
    <title>解决git status/commit时中文文件名乱码</title>
    <link href="https://carrie1217.github.io/2016/12/05/mac_library_show_hide/"/>
    <id>https://carrie1217.github.io/2016/12/05/mac_library_show_hide/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-05T10:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>#不对0x80以上的字符进行quote，解决git status/commit时中文文件名乱码</p>
<p><code>git config --global core.quotepath false</code></p>
<p><a href="http://xstarcd.github.io/wiki/shell/git_chinese.html" target="_blank" rel="external">http://xstarcd.github.io/wiki/shell/git_chinese.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#不对0x80以上的字符进行quote，解决git status/commit时中文文件名乱码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git config --global core.quotepath false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://xstar
    
    </summary>
    
      <category term="git" scheme="https://carrie1217.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://carrie1217.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用微信SDK遇到的问题汇总</title>
    <link href="https://carrie1217.github.io/2016/12/05/%E5%BE%AE%E4%BF%A1SDK%E4%BD%BF%E7%94%A8%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://carrie1217.github.io/2016/12/05/微信SDK使用时遇到的问题汇总/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-05T10:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>在正式开始之前这里要着啰嗦一下，进来的同学一定要看，在申请应用的时候要填一个签名，这个签名是由应用的签名文件keystore决定的，那么你在填这个签名的时候，一定要把你的应用用正式的keyStore生成apk，安装到手机，然后用微信提供的获取应用签名的apk工具获取你应用的签名，然后这会生成的这个签名才是正确的，千万记得，不要使用dubug的ketStore测试，不然后面虽然可以修改，修改了后要审核，但是审核也是需要时间的，会很麻烦。<br>还有一点，你在测试微信分享的时候可能会直接在Eclipse好或者Studio运行项目，那样使用的肯定是dubug的keyStore了，这样分享的时候会被微信拒绝，微信会生成缓存，就算你这会换了正式的keystore来分享显示的还会是被微信拒绝，就算重启微信重启手机也不管用，那你就要清空微信的数据了；很多东西是不是丢了？好吧，啰嗦够了，正式进入主题。</p>
<p>今天会提供如果实现微信分享，并且对怎么成功接受回调结果做一个详细的介绍和教程，有回调结果失败的同学，往下看吧</p>
<a id="more"></a>
<h1 id="使用微信SDK遇到的问题汇总"><a href="#使用微信SDK遇到的问题汇总" class="headerlink" title="使用微信SDK遇到的问题汇总"></a>使用微信SDK遇到的问题汇总</h1><p>首先就是要去开放平台申请应用，审核通过后会分配给你一个AppID：</p>
<p>然后，要下载微信开放平台的SDk，<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;lang=zh_CN" target="_blank" rel="external">下载页面地址</a>，然后把libammsdk.jar这个包放在lib下；<br>下面我做了一个图片、文字、URL的封装，因为这几个是最常用的对吧，如果还需要其他的分享类型，那么你在这里添加几个方法就可以了，很方便修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 利用微信SDK分享到微信</div><div class="line">     */</div><div class="line">    public abstract class ShareWechat &#123;</div><div class="line"></div><div class="line">        private ShareWechat() &#123;</div><div class="line">        &#125;//abstract不可实例化也不可继承</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 压缩图的大小</div><div class="line">         **/</div><div class="line">        private static final int THUMB_SIZE = 150;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 分享文字</div><div class="line">         *</div><div class="line">         * @param wxApi        微信分享对象</div><div class="line">         * @param shareContent 分享内容</div><div class="line">         * @param isToFriend   是否分享到朋友圈</div><div class="line">         * @author YOLANDA</div><div class="line">         */</div><div class="line">        public static void shareText(IWXAPI wxApi, String shareContent, boolean isToFriend) &#123;</div><div class="line">            WXTextObject textObj = new WXTextObject();</div><div class="line">            textObj.text = shareContent;</div><div class="line">            WXMediaMessage msg = new WXMediaMessage();</div><div class="line">            msg.mediaObject = textObj;</div><div class="line">            // 发送文本类型的消息时，title字段不起作用</div><div class="line">            // msg.title = &quot;Title&quot;;</div><div class="line">            msg.description = shareContent;</div><div class="line">            // 构造一个Req</div><div class="line">            SendMessageToWX.Req req = new SendMessageToWX.Req();</div><div class="line">            req.transaction = buildTransaction(&quot;text&quot;); // transaction字段用于唯一标识一个请求</div><div class="line">            req.message = msg;</div><div class="line">            req.scene = isToFriend ? SendMessageToWX.Req.WXSceneTimeline : SendMessageToWX.Req.WXSceneSession;</div><div class="line">            wxApi.sendReq(req);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 分享一个图片</div><div class="line">         *</div><div class="line">         * @param wxApi</div><div class="line">         * @param shareBitmap 要分享的图片</div><div class="line">         * @param isToFriend  是否是分享到朋友圈</div><div class="line">         * @author YOLANDA</div><div class="line">         */</div><div class="line">        public static void shareImg(IWXAPI wxApi, Bitmap shareBitmap, boolean isToFriend) &#123;</div><div class="line">            WXImageObject imgObj = new WXImageObject(shareBitmap);</div><div class="line"></div><div class="line">            WXMediaMessage msg = new WXMediaMessage();</div><div class="line">            msg.mediaObject = imgObj;</div><div class="line"></div><div class="line">            Bitmap thumbBmp = Bitmap.createScaledBitmap(shareBitmap, THUMB_SIZE, THUMB_SIZE, true);</div><div class="line">            msg.thumbData = bmpToByteArray(thumbBmp);  // 设置缩略图</div><div class="line"></div><div class="line">            SendMessageToWX.Req req = new SendMessageToWX.Req();</div><div class="line">            req.transaction = buildTransaction(&quot;img&quot;);</div><div class="line">            req.message = msg;</div><div class="line">            req.scene = isToFriend ? SendMessageToWX.Req.WXSceneTimeline : SendMessageToWX.Req.WXSceneSession;</div><div class="line">            wxApi.sendReq(req);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 分享一个网页</div><div class="line">         *</div><div class="line">         * @param wxApi</div><div class="line">         * @param httpUrl     要分享的连接</div><div class="line">         * @param isToFriend  是否是分享到朋友圈</div><div class="line">         * @param iconRes     ICON</div><div class="line">         * @param title       标题</div><div class="line">         * @param description 描述</div><div class="line">         * @author YOLANDA</div><div class="line">         */</div><div class="line">        public static void shareWebPage(IWXAPI wxApi, String httpUrl, boolean isToFriend, int iconRes, String title, String description) &#123;</div><div class="line">            Bitmap icon = BitmapFactory.decodeResource(Application.getInstance().getResources(), iconRes);</div><div class="line">            shareWebPage(wxApi, httpUrl, isToFriend, icon, title, description);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 分享一个网页</div><div class="line">         *</div><div class="line">         * @param wxApi</div><div class="line">         * @param httpUrl</div><div class="line">         * @param isToFriend</div><div class="line">         * @param icon</div><div class="line">         * @param title</div><div class="line">         * @param description</div><div class="line">         * @author YOLANDA</div><div class="line">         */</div><div class="line">        public static void shareWebPage(IWXAPI wxApi, String httpUrl, boolean isToFriend, Bitmap icon, String title, String description) &#123;</div><div class="line">            WXWebpageObject webpage = new WXWebpageObject();</div><div class="line">            webpage.webpageUrl = httpUrl;</div><div class="line">            WXMediaMessage msg = new WXMediaMessage(webpage);</div><div class="line">            msg.title = title;</div><div class="line">            msg.description = description;</div><div class="line">            msg.thumbData = bmpToByteArray(icon);</div><div class="line"></div><div class="line">            SendMessageToWX.Req req = new SendMessageToWX.Req();</div><div class="line">            req.transaction = buildTransaction(&quot;webpage&quot;);</div><div class="line">            req.message = msg;</div><div class="line">            req.scene = isToFriend ? SendMessageToWX.Req.WXSceneTimeline : SendMessageToWX.Req.WXSceneSession;</div><div class="line">            wxApi.sendReq(req);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 得到Bitmap的byte</div><div class="line">         *</div><div class="line">         * @param bmp</div><div class="line">         * @param needRecycle</div><div class="line">         * @return</div><div class="line">         * @author YOLANDA</div><div class="line">         */</div><div class="line">        private static byte[] bmpToByteArray(Bitmap bmp) &#123;</div><div class="line">            ByteArrayOutputStream output = new ByteArrayOutputStream();</div><div class="line">            bmp.compress(CompressFormat.PNG, 100, output);</div><div class="line"></div><div class="line">            byte[] result = output.toByteArray();</div><div class="line">            try &#123;</div><div class="line">                output.close();</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 构建一个唯一标志</div><div class="line">         *</div><div class="line">         * @param type</div><div class="line">         * @return</div><div class="line">         * @author YOLANDA</div><div class="line">         */</div><div class="line">        private static String buildTransaction(String type) &#123;</div><div class="line">            return (type == null) ? String.valueOf(System.currentTimeMillis()) : (type + System.currentTimeMillis());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>如果你看了上面的方法的封装，想必你一定看到了分享的方法都需要一个IWXAPI的参数，那么现在就是要生成这个参数，在你分享之前或者在OnCreate的方法中可以：<br>IWXAPI wxapi = WXAPIFactory.createWXAPI(context, Constants.WECHAT_APP_ID);</p>
<p>注意，应该使用<br>IWXAPI wxapi = WXAPIFactory.createWXAPI(context, Constants.WECHAT_APP_ID);<br>而不是<br>mWxApi = WXAPIFactory.createWXAPI(context, Constants.WECHAT_APP_ID, false);</p>
<p>为什么呢，原因在下面会解释到。<br>其实现在已经可以分享成功了，但是我们怎么知道是不是分享成功了呢？那就是要接受微信的分享结果回调了，我们需要提供一个专门的Activity，并且实现微信SDK的IWXAPIEventHandler接口<br>收不到微信的分享结果回调？很多人在这里就出问题了，我们的Activity实现了微信的IWXAPIEventHandler接口，但是收不到微信的回调，那么问题出在哪里呢？且听我细细道来<br>看过微信分享的demo的人就知道，微信接受的入口类在<strong>packagename.wxapi</strong>包下，它的分享结果回调也在这个类，那么我们实现这个IWXAPIEventHandler接口怎么就不行呢？往下看</p>
<p>原来，我们在开放平台注册应用的时候要填包名，然后微信会在packagename.wxapi找这个回调接口的类，并且这个类必须是集成了Activity的类，并且实现IWXAPIEventHandler接口，而且最重要的是：这个类的名字一定要是WXEntryActivity.java；这样，你就可以接受到微信回调结果了：<br>那么注意的几点总结出来就是：</p>
<ol>
<li>我们必须有一个类继承Activity，且实现微信SDK提供的IWXAPIEventHandler接口</li>
<li>实现IWXAPIEventHandler接口的Activity的文件名称必须是：WXEntryActivity.java</li>
<li>这个WXEntryActivity.java类必须在packagename.wxapi包下，比如说我的程序包名是com.yoalnda.wechat，那么这个文件就放在com.yolanda.wechat.wxapi下</li>
<li>这个类WXEntryActivity.java在onCreate中<br>mWxApi = WXAPIFactory.createWXAPI(context, Constants.WECHAT_APP_ID, false);<pre><code>mWxApi.handleIntent(getIntent(), this);
</code></pre>上边是生成解析回调结果的wxapi对象，下面就是把接受到的Intent给wxapi这个对象，它会解析回调结果，通过我们实现的IWXAPIEventHandler接口回调给我们，这个接口有两个方法，大家可以看我下面的代码就清楚了</li>
<li>不要忘记了onNewIntent这个方法，也要写上，为了防止这个Activity处于栈顶的时候微信回调我们</li>
</ol>
<p>刚才 说到不能使用<br><code>IWXAPI wxapi = WXAPIFactory.createWXAPI(context, Constants.WECHAT_APP_ID, false);</code></p>
<p>下面就是原因，WXAPIFactory提供了两个实例化WXAPI的方法，含有第三个Boolean参数的这个是接受回调结果的时候用的，虽然前面用这个也可以成功。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * @author YOLANDA</div><div class="line">     * @Time 2015年3月30日 下午4:55:56</div><div class="line">     */</div><div class="line">    public class WXEntryActivity extends BaseActivity implements IWXAPIEventHandler &#123;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 分享到微信接口</div><div class="line">         **/</div><div class="line">        private IWXAPI mWxApi;</div><div class="line">        /**</div><div class="line">         * 分享结果信息</div><div class="line">         **/</div><div class="line">        private TextView txtShareResult;</div><div class="line">        /**</div><div class="line">         * 分享结果图片</div><div class="line">         **/</div><div class="line">        private ImageView imgShareResult;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        protected void onActivityCreate(Bundle savedInstanceState) &#123;</div><div class="line">            setContentLayout(R.layout.activity_share2wechat_result);</div><div class="line">            setBackButtonVisibility(true);</div><div class="line"></div><div class="line">            mWxApi = WXAPIFactory.createWXAPI(context, Constants.WECHAT_APP_ID, false);</div><div class="line">            mWxApi.registerApp(Constants.WECHAT_APP_ID);</div><div class="line">            mWxApi.handleIntent(getIntent(), this);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        protected void onNewIntent(Intent intent) &#123;</div><div class="line">            super.onNewIntent(intent);</div><div class="line">            setIntent(intent);</div><div class="line">            mWxApi.handleIntent(intent, this);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /***</div><div class="line">         * 请求微信的相应码</div><div class="line">         *</div><div class="line">         * @param arg0</div><div class="line">         * @author YOLANDA</div><div class="line">         */</div><div class="line">        @Override</div><div class="line">        public void onResp(BaseResp baseResp) &#123;</div><div class="line">            txtShareResult = (TextView) findViewById(R.id.txt_share2wechat_result);</div><div class="line">            imgShareResult = (ImageView) findViewById(R.id.img_share2wechat_result);</div><div class="line">            imgShareResult.setImageResource(R.drawable.operation_failed);</div><div class="line">            setTitle(&quot;分享失败&quot;);</div><div class="line">            int result = 0;</div><div class="line">            Log.i(&quot;错误号：&quot; + baseResp.errCode + &quot;；信息：&quot; + baseResp.errStr);</div><div class="line">            switch (baseResp.errCode) &#123;</div><div class="line">                case BaseResp.ErrCode.ERR_OK:</div><div class="line">                    setTitle(&quot;分享成功&quot;);</div><div class="line">                    result = R.string.sharewechat_success;//成功</div><div class="line">                    imgShareResult.setImageResource(R.drawable.operation_succeed);</div><div class="line">                    break;</div><div class="line">                case BaseResp.ErrCode.ERR_USER_CANCEL:</div><div class="line">                    result = R.string.sharewechat_cancel;//取消</div><div class="line">                    break;</div><div class="line">                case BaseResp.ErrCode.ERR_AUTH_DENIED:</div><div class="line">                    result = R.string.sharewechat_deny;//被拒绝</div><div class="line">                    break;</div><div class="line">                default:</div><div class="line">                    result = R.string.sharewechat_back;//返回</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">            txtShareResult.setText(result);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 微信主动请求我们</div><div class="line">         **/</div><div class="line">        @Override</div><div class="line">        public void onReq(BaseReq baseResp) &#123;</div><div class="line">            try &#123;</div><div class="line">                Intent intent = new Intent(Application.getInstance(), MainActivity.class);</div><div class="line">                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">                Application.getInstance().startActivity(intent);</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>至此，微信分享和接口回调结果都完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正式开始之前这里要着啰嗦一下，进来的同学一定要看，在申请应用的时候要填一个签名，这个签名是由应用的签名文件keystore决定的，那么你在填这个签名的时候，一定要把你的应用用正式的keyStore生成apk，安装到手机，然后用微信提供的获取应用签名的apk工具获取你应用的签名，然后这会生成的这个签名才是正确的，千万记得，不要使用dubug的ketStore测试，不然后面虽然可以修改，修改了后要审核，但是审核也是需要时间的，会很麻烦。&lt;br&gt;还有一点，你在测试微信分享的时候可能会直接在Eclipse好或者Studio运行项目，那样使用的肯定是dubug的keyStore了，这样分享的时候会被微信拒绝，微信会生成缓存，就算你这会换了正式的keystore来分享显示的还会是被微信拒绝，就算重启微信重启手机也不管用，那你就要清空微信的数据了；很多东西是不是丢了？好吧，啰嗦够了，正式进入主题。&lt;/p&gt;
&lt;p&gt;今天会提供如果实现微信分享，并且对怎么成功接受回调结果做一个详细的介绍和教程，有回调结果失败的同学，往下看吧&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>处理表情和文字输入的正确姿势</title>
    <link href="https://carrie1217.github.io/2016/12/05/%E5%A4%84%E7%90%86%E8%A1%A8%E6%83%85%E5%92%8C%E6%96%87%E5%AD%97%E8%BE%93%E5%85%A5%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>https://carrie1217.github.io/2016/12/05/处理表情和文字输入的正确姿势/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-05T10:42:45.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>点击“输入框”以外的区域，如果当前他们显示的话，需要隐藏表情面板或者软键盘。</li>
<li>点击“输入框”，如果当前表情面板显示的话，需要先隐藏之，然后弹出软键盘。</li>
<li>输入框中一般会有显示当前输入状态的提示按钮（有的在输入框左边，有的在右边），比如，如果当前是表情输入状态，该提示按钮的图标应该是软键盘，以提示用户点击该按钮切换到文字输入状态。这个提示按钮的图标和点击后的响应要分情况处理，是动态的。</li>
<li><p>键盘相关操作方法</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line"></div><div class="line">/**</div><div class="line"> * 弹出软键盘</div><div class="line"> */</div><div class="line">private void showKeyboard() &#123;</div><div class="line">    imm.toggleSoftInput(0, InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 隐藏软键盘</div><div class="line"> */</div><div class="line">private void hideKeyboard() &#123;</div><div class="line">    if (getWindow().getAttributes().softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN) &#123;</div><div class="line">        if (getCurrentFocus() != null)</div><div class="line">            imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),   InputMethodManager.HIDE_NOT_ALWAYS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>表情面板如何在xml中布局</p>
</li>
</ol>
<ul>
<li>主要有两部分，可见的“输入框”和不可见的表情面板。其实还有一部分，是系统提供的软键盘，不过不需要在布局中做处理。</li>
<li><p>表情面板中用ViewPager来翻页，用ViewpagerIndicator做分页器</p>
<p>环信示例：<br>  ​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    android:id=&quot;@+id/bar_bottom&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_alignParentBottom=&quot;true&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:paddingBottom=&quot;2dip&quot;</div><div class="line">    android:paddingTop=&quot;2dip&quot;&gt;</div><div class="line"></div><div class="line">    &lt;View</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;0.5dp&quot;</div><div class="line">        android:background=&quot;@color/divider_color&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:id=&quot;@+id/rl_bottom&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:gravity=&quot;center_vertical&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:paddingTop=&quot;4dp&quot;&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/chat_sendpic&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_marginLeft=&quot;5dp&quot;</div><div class="line">            android:background=&quot;@drawable/chat_input_img_btn&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;FrameLayout</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:layout_weight=&quot;8&quot;</div><div class="line">            android:layout_margin=&quot;5dp&quot; &gt;</div><div class="line"></div><div class="line">            &lt;EditText</div><div class="line">                android:id=&quot;@+id/et_sendmessage&quot;</div><div class="line">                android:layout_width=&quot;wrap_content&quot;</div><div class="line">                android:layout_height=&quot;wrap_content&quot;</div><div class="line">                android:background=&quot;@drawable/chat_input_box&quot;</div><div class="line">                android:hint=&quot;@string/input_chat_msg_hint&quot;</div><div class="line">                android:imeOptions=&quot;actionSend&quot;</div><div class="line">                android:inputType=&quot;text&quot;</div><div class="line">                android:maxLines=&quot;6&quot;</div><div class="line">                android:padding=&quot;5dp&quot; /&gt;</div><div class="line">            &lt;Button</div><div class="line">                android:id=&quot;@+id/btn_chat_emoj_switch&quot;</div><div class="line">                android:layout_width=&quot;30dp&quot;</div><div class="line">                android:layout_height=&quot;30dp&quot;</div><div class="line">                android:layout_marginRight=&quot;10dp&quot;</div><div class="line">                android:layout_gravity=&quot;right|center_vertical&quot;</div><div class="line">                android:background=&quot;@drawable/chat_input_emoji_btn&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:layout_marginRight=&quot;5dp&quot;&gt;</div><div class="line"></div><div class="line">            &lt;Button</div><div class="line">                android:id=&quot;@+id/btn_chat_send&quot;</div><div class="line">                android:layout_width=&quot;80dp&quot;</div><div class="line">                android:layout_height=&quot;40dp&quot;</div><div class="line">                android:text=&quot;@string/chat_btn_send&quot;</div><div class="line">                android:background=&quot;@drawable/bg_chat_send&quot; /&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:id=&quot;@+id/ll_face_container&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;150dp&quot;</div><div class="line">        android:orientation=&quot;vertical&quot;</div><div class="line">        android:visibility=&quot;gone&quot;&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v4.view.ViewPager</div><div class="line">            android:id=&quot;@+id/vp_chat_pager&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div><div class="line">​</div></pre></td></tr></table></figure></p>
</li>
</ul>
<ol>
<li>实现同微信Android客户端那样的输入效果</li>
</ol>
<ul>
<li>点击表情按钮，弹出表情面板，<code>emojPanelShown = true</code>, 表情按钮图标变成键盘图标</li>
<li>点击键盘按钮，弹出软键盘，<code>emojPanelShown = false</code>, 但是表情面板并没有被隐藏，只是被键盘盖住而已，键盘按钮图标改成表情按钮图标</li>
<li>点击表情按钮图标，<code>emojPanelShown = true</code>, 隐藏软键盘，表情面板再次出现，表情按钮图标再次变成键盘按钮图标</li>
<li>点击键盘按钮，同第二步，以此类推。<br>  这里还有两点需要特别注意：<ul>
<li>点击空白区域，表情面板和软键盘都收起</li>
<li>点击软键盘上的“收起”按钮，收起软键盘时，获取键盘收起的事件，并且在<code>emojPanelShown = false</code>时才收起表情面板和软键盘。这是为了防止键盘的该收起事件与点击表情按钮时收起键盘的事件冲突。</li>
</ul>
</li>
</ul>
<ol>
<li><p>文字输入框随着输入的文字增多，<a href="http://stackoverflow.com/a/3286921/3962551" target="_blank" rel="external">输入框高度自动增加</a>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;EditText</div><div class="line"> android:id=&quot;@+id/edtInput&quot;</div><div class="line"> android:layout_width=&quot;0dip&quot;</div><div class="line"> android:layout_height=&quot;wrap_content&quot;</div><div class="line"> android:layout_weight=&quot;1&quot;</div><div class="line"> android:hint=&quot;@string/compose_hint&quot;</div><div class="line"> android:inputType=&quot;textCapSentences|textMultiLine&quot;</div><div class="line"> android:maxLength=&quot;2000&quot;</div><div class="line"> android:maxLines=&quot;4&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>一些未解决的问题</p>
</li>
</ol>
<ul>
<li>[已解决］表情面板和软键盘来回切换次数超过3次，第4次及以后会，软键盘再次弹出时，会盖住输入栏。一个原因是软键盘高度比表情面板高度高，但是根本原因还没找到。＊已经发现原因＊，是由于点击区域太小，误点击到其它区域导致键盘收起的。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;点击“输入框”以外的区域，如果当前他们显示的话，需要隐藏表情面板或者软键盘。&lt;/li&gt;
&lt;li&gt;点击“输入框”，如果当前表情面板显示的话，需要先隐藏之，然后弹出软键盘。&lt;/li&gt;
&lt;li&gt;输入框中一般会有显示当前输入状态的提示按钮（有的在输入框左边，有的在右边），比如，如果当前是表情输入状态，该提示按钮的图标应该是软键盘，以提示用户点击该按钮切换到文字输入状态。这个提示按钮的图标和点击后的响应要分情况处理，是动态的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;键盘相关操作方法&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android机型适配之痛</title>
    <link href="https://carrie1217.github.io/2016/12/05/Android%E6%9C%BA%E5%9E%8B%E9%80%82%E9%85%8D%E4%B9%8B%E7%97%9B/"/>
    <id>https://carrie1217.github.io/2016/12/05/Android机型适配之痛/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-06T02:33:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android项目中Camera的适配。</p>
<a id="more"></a>
<h2 id="多姿多彩的Camera"><a href="#多姿多彩的Camera" class="headerlink" title="多姿多彩的Camera"></a>多姿多彩的Camera</h2><ol>
<li>Intent调用手机内相机程序<br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee566e6aeef.jpg" alt=""><br>如果我们设置了照片的存储路径，那么很可能会遇到一下三种问题：</li>
</ol>
<p>问题一：onActivityResult方法中的data返回为空（数据表明，93%的机型的data将会是Null，所以如果我们指定了路径，就不要使用data来获取照片，起码在使用前要做空判断）。<br>问题二：照片无法存储。<br>如果自定义存储路径是/mnt/sdcard/lowry/，而手机SD卡下在拍照前没有名为lowry的文件夹，那么部分手机拍照后图片不会保存，导致我们无法获得照片，大多数手机的相机遇到文件夹不存在的情况都会自己创建出不存在的文件夹，而个别手机却不会创建，其代表机型为：三星I8258、华为H30-T00、红米等。</p>
<p>解决的方法就是在指定存储路径前先判断路径中的文件夹是否都存在，不存在先创建再调用相机。</p>
<p>问题三：照片可以存储，但是名字不对。<br>file:///mnt/sdcard/123 1.jpg，由于URI的fromFile方法会将路径中的空格用“%20”取代。</p>
<p>其实对于大多数的手机这都不算事，手机在解析存储路径的时候都会将“%20”替换为空格，这样实际上最终的照片名字还是我们当初指定的名字：123 1.jpg，遗憾的是个别手机（如酷派7260）系统自带的相机没有将“%20”读成空格，拍照后的照片的名字是123%201.jpg，我们用路径“file:///mnt/sdcard/123 1.jpg”能找到照片才怪！<br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee567446ec6.jpg" alt=""><br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee56c455fc3.jpg" alt=""><br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee56cc3c251.jpg" alt=""></p>
<p>总结：</p>
<p>（1）使用onActivityResult中的intent(data)前要做空判断。<br>（2）指定拍照路径时，先检查路径中的文件夹是否都存在，不存在时先创建文件夹再调用   相机拍照。<br>（3）指定拍照存储路径时，照片的命名中不要包含空格等特殊符号。</p>
<h2 id="通过Camera的open方法调用手机摄像头"><a href="#通过Camera的open方法调用手机摄像头" class="headerlink" title="通过Camera的open方法调用手机摄像头"></a>通过Camera的open方法调用手机摄像头</h2><p>2.1 连续自动对焦crash</p>
<p>原因：第一次对焦未结束，应用层又发起的第二次对焦，引起对焦失败。<br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee57d42b772_middle.jpg" alt=""><br>解决方案一：传入AutoFocusCallback；<br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee585dd32ae.jpg" alt=""><br>解决方案二：延时操作；</p>
<p>解决方案三：异常捕获。</p>
<h2 id="UI适配"><a href="#UI适配" class="headerlink" title="UI适配"></a>UI适配</h2><p>有时候布局文件中的某个标签还会引起一些问题，我们先看下面一段布局代码：<br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee5b1629003.jpg" alt=""><br>正确结果：<br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee5b34bae1a.jpg" alt=""><br>错误结果：<br><img src="http://img.ptcms.csdn.net/article/201509/08/55ee5b050cf58.jpg" alt=""><br>这就是因为Android 3.0以下版本在FrameLayout中使用layout_marginTo标签，必须要设置gravity才能生效。</p>
<p>那么如何解决这个问题呢？在设置android:layout_marginTop的组件中再设置一下 <code>android:layout_gravity=&quot;top&quot;</code>即可。</p>
<p><a href="http://www.csdn.net/article/2015-09-08/2825645/3" target="_blank" rel="external">原文链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android项目中Camera的适配。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于Travis-CI搭建Android自动打包发布工作流</title>
    <link href="https://carrie1217.github.io/2016/12/05/%E5%9F%BA%E4%BA%8ETravis-CI%E6%90%AD%E5%BB%BAAndroid%E8%87%AA%E5%8A%A8%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>https://carrie1217.github.io/2016/12/05/基于Travis-CI搭建Android自动打包发布工作流/</id>
    <published>2016-12-05T10:12:00.000Z</published>
    <updated>2016-12-06T02:17:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>未自动化前安卓开发总是避免不了这样的工作流程：</p>
<ol>
<li>开发一些新功能，提交代码</li>
<li>完成一部分功能后，打包一个测试版APK</li>
<li>将测试版APK上传到QQ群 / 网盘 / Fir.im / 蒲公英等</li>
<li>在QQ群或发布平台解释当前版本所完成的功能</li>
<li>通知测试人员测试</li>
</ol>
<p>实现了这套自动化发布后，工作流程被简化成：</p>
<ol>
<li>开发新功能，提交代码</li>
<li>通过git tag对代码打一个内测版的tag，</li>
</ol>
<p>Tag提交后Travis CI会自动编译代码，生成APK文件并分发到Github和fir.im，Github和fir.im中会保持Tag的描述信息，分发完成后会有邮件通知所有参与测试的人员。而作为开发人员，只需要专注于对代码打好一个Tag就可以了。</p>
<p>整个流程看似做了不少工作，其实体现在Travis CI只有数行指令而已，以下逐一讲解：</p>
<a id="more"></a>
<h2 id="对安卓项目启用Travis-CI"><a href="#对安卓项目启用Travis-CI" class="headerlink" title="对安卓项目启用Travis CI"></a>对安卓项目启用Travis CI</h2><p><a href="http://travis-ci.org/" target="_blank" rel="external">Travis CI</a>应该可以算是目前最好用的持续集成服务之一了，如果代码库是基于Github的话，可以很简单的开启。由于本文涉及到了很多Travis CI的基础概念，建议首先对<a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="external">Travis CI的自定义构建</a>一节有所了解。</p>
<p>首先准备一个<code>.travis.yml</code>文件放在安卓项目根目录下，<code>.travis.yml</code>中记录了Travis CI所需的基础信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">language: android</div><div class="line"></div><div class="line">sudo: false</div><div class="line"></div><div class="line">android:</div><div class="line">  components:</div><div class="line">  - build-tools-23.0.2</div><div class="line">  - android-23</div><div class="line">  - extra-android-m2repository</div><div class="line">  - extra-android-support</div><div class="line"></div><div class="line">script:</div><div class="line">  - &quot;./gradlew assembleRelease&quot;</div></pre></td></tr></table></figure>
<p>官方模版地址在<a href="http://avnpc.com/pages/android-auto-deploy-workflow-on-travis-ci" target="_blank" rel="external">这里</a></p>
<p>无需读文档就可以通过上面的配置大概知道，我们要运行的是一个安卓项目，安卓SDK版本为23，项目所用的BuildTools版本为23.0.2，为编译这个项目我们还引入了一些必须的组件，如Support Library（extra-android-support）、Android Support Repository（extra-android-m2repository）等。</p>
<p>当Travis CI准备好我们所需要的环境后，将自动运行yml文件<code>script</code>部分所设置的指令，上例中运行的是<code>./gradlew assembleRelease</code>，运行成功的话会在项目的主模块下生成<code>build/outputs/apk/app-release.apk</code>。</p>
<p>最后进入Travis CI主页，使用有项目Admin权限的Github帐号直接登录。选择要开启Travis CI的项目，将右边的开关设为On即可。</p>
<p>Travis CI目前有2个网站：如果是开源项目，直接进入<a href="https://travis-ci.org/" target="_blank" rel="external">travis-ci.org</a>即可，如果是私有付费项目，则需要进入<a href="https://travis-ci.com/" target="_blank" rel="external">travis-ci.com</a>，2个网站除了域名外所有的界面及操作几乎一模一样。</p>
<p>配置中还有一行<code>sudo: false</code>，是为了开启<a href="https://docs.travis-ci.com/user/migrating-from-legacy/" target="_blank" rel="external">基于容器的Travis CI任务</a>，让编译效率更高。</p>
<h2 id="安卓自动化构建的密码和证书安全"><a href="#安卓自动化构建的密码和证书安全" class="headerlink" title="安卓自动化构建的密码和证书安全"></a>安卓自动化构建的密码和证书安全</h2><p>安卓项目发布需要证书文件和若干密码，但无论是开源项目还是私有项目，任何时候都不应该将原始证书或密码放入代码库（原则上来讲证书和密码也不应该交于开发人员，而应该只能通过发布服务器进行编译）。Travis CI为此提供了2种解决方案，一种是对敏感信息、密码、证书等进行对称加密，在CI构建环境时解密，另一种是将密码等通过Travis CI的控制台（即网站）设置为构建时的环境变量。</p>
<p>由于前者会在Travis控制台生成一对环境变量，所以我的做法是尽量选择后者，但由于Travis控制台无法上传文件，因此涉及到文件加密的部分，则只能选择前者。</p>
<p>说了这么多，首先还是需要先对编译脚本进行改造，如果不考虑安全问题，项目的<code>build.gradle</code>文件可能会是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    signingConfigs &#123;</div><div class="line">        releaseConfig &#123;</div><div class="line">            storeFile file(&quot;../keys/evandroid.jks&quot;)</div><div class="line">            storePassword &quot;123456&quot;</div><div class="line">            keyAlias &quot;evandroid_alias&quot;</div><div class="line">            keyPassword &quot;654321&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled false</div><div class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</div><div class="line">            signingConfig signingConfigs.releaseConfig</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而我们最终要的效果，还是希望一份编译脚本既可以用于开发环境，也可以在CI环境下使用，在Travis CI中，可以通过点击项目名称 -&gt; Settings -&gt; Environment Variables中设置环境变量，比如我们可以针对上面的配置，分别设置<code>KEYSTORE_PASS</code>、<code>ALIAS_NAME</code>、<code>ALIAS_PASS</code>三个环境变量，在Travis CI环境下可以通过<code>System.getenv()</code>获得这些环境变量。</p>
<p>本地开发环境中，我的做法是将这几个变量加到<code>gradle.properties</code>文件中，这样就可以在<code>build.gradle</code>内直接使用了。下面是开发环境的<code>gradle.properties</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">KEYSTORE_PASS=123456</div><div class="line">ALIAS_NAME=evandroid_alias</div><div class="line">ALIAS_PASS=654321</div></pre></td></tr></table></figure></p>
<p>这样一来<code>build.gradle</code>就变成了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">releaseConfig &#123;</div><div class="line">            storeFile file(&quot;../keys/evandroid.jks&quot;)</div><div class="line">            storePassword project.hasProperty(&quot;KEYSTORE_PASS&quot;) ? KEYSTORE_PASS : System.getenv(&quot;KEYSTORE_PASS&quot;)</div><div class="line">            keyAlias project.hasProperty(&quot;ALIAS_NAME&quot;) ? ALIAS_NAME : System.getenv(&quot;ALIAS_NAME&quot;)</div><div class="line">            keyPassword project.hasProperty(&quot;ALIAS_PASS&quot;) ? ALIAS_PASS : System.getenv(&quot;ALIAS_PASS&quot;)</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>接下来处理证书文件，为了方便文件加密等功能，Travis CI提供了一个基于ruby的CLI命令行工具，可以直接使用gem安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install travis</div></pre></td></tr></table></figure></p>
<p>安装后进入安卓项目根目录，尝试对证书文件加密：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis encrypt-file keys/evandroid.jks --add</div></pre></td></tr></table></figure></p>
<p>如果首次运行，travis会提示需要登录，运行<code>travis login --org</code>并输入Github用户名密码即可。（付费版则为<code>travis login --pro</code>）<br>travis encrypt-file指令会做几件事情：</p>
<ol>
<li>在Travis CI控制台自动生成一对密钥，形如：<code>encrypted_e41864bb9dab_key</code>, <code>encrypted_e41864bb9dab_iv</code></li>
<li>基于密钥通过<code>openssl</code>对文件进行加密，上例中会项目根目录生成<code>evandroid.jks.enc</code>文件</li>
<li><p>在<code>.travis.yml</code>中自动生成Travis CI环境下解密文件的配置，上例运行后可以看到<code>.travis.yml</code>中多了几行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">before_install:</div><div class="line">- openssl aes-256-cbc -K $encrypted_e41864bb9dab_key -iv     $encrypted_e41864bb9dab_i -in keys/evandroid.jks.enc     -out keys/evandroid.jks -d</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Travis CI默认在项目根目录下运行，因此注意根据实际需求调整enc文件的路径。</p>
<p>最后别忘了在<code>.gitignore</code>中忽略<code>keys/evandroid.jks</code>以及<code>gradle.properties</code>并在代码库中将其删除。</p>
<h2 id="Travis-CI自动发布安卓apk文件到Github-Release"><a href="#Travis-CI自动发布安卓apk文件到Github-Release" class="headerlink" title="Travis CI自动发布安卓apk文件到Github Release"></a>Travis CI自动发布安卓apk文件到Github Release</h2><p>Travis CI的<code>script</code>部分运行成功后，可以通过配置文件进入到发布阶段。下面是一个Travis CI发布的示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  provider: releases</div><div class="line">  user: &quot;GITHUB USERNAME&quot;</div><div class="line">  password: &quot;GITHUB PASSWORD&quot;</div><div class="line">  file: app/build/outputs/apk/app-release.apk</div><div class="line">  skip_cleanup: true</div><div class="line">  on:</div><div class="line">    tags: true</div></pre></td></tr></table></figure></p>
<p>这个例子中配置了这样一些内容：</p>
<ol>
<li><code>provider</code>：发布目标为Github Release，除了Github外，Travis CI还支持发布到AWS、Google App Engine等数十种provider</li>
<li>Github用户名和密码，因为Travis 3. CI要上传APK文件，因此需要有Github项目的写入权限</li>
<li><code>file</code>： 发布文件，输入文件路径即可</li>
<li><code>skip_cleanup</code>: 默认情况下Travis CI在完成编译后会清除所有生成的文件，因此需要将<code>skip_cleanup</code>设置为true来忽略此操作。</li>
<li><code>on</code>： 发布的时机，这里配置为<code>tags: true</code>，即只在有<code>tag</code>的情况下才发布。</li>
</ol>
<p>虽然这样就能完成自动发布，但是直接暴露了Github密码是我们更加不能接受的。更好的做法是在Github -&gt; settings -&gt; Personal access tokens 生成一个只能访问当前项目并只有读取权限的<a href="https://help.github.com/articles/creating-an-access-token-for-command-line-use/" target="_blank" rel="external">Github Access Token</a>，并通过Travis CI将Access Token加密。听起来有点繁琐，好在Travis CLI中已经可以通过一行指令做好这一切：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">travis setup release</div></pre></td></tr></table></figure></p>
<p>根据提示填写上述配置项目的信息后，Travis CLI会自动在<code>.travis.yml</code>文件中生成好所有的配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  provider: releases</div><div class="line">  api_key:</div><div class="line">    secure: XXX</div><div class="line">  file: app/build/outputs/apk/app-release.apk</div><div class="line">  skip_cleanup: true</div><div class="line">  on:</div><div class="line">    tags: true</div><div class="line">    all_branches: true</div></pre></td></tr></table></figure></p>
<p>其中api_key下的secure就是加密后的Access Token</p>
<h2 id="自动发布APK到fir-im"><a href="#自动发布APK到fir-im" class="headerlink" title="自动发布APK到fir.im"></a>自动发布APK到fir.im</h2><p>自动发布到Github对于开发人员已经足够，但是考虑到项目实际需要以及国情，还是有必要选择一个国内的App分发服务，fir.im、蒲公英都是不错的选择，不但允许游客下载，还提供了二维码等更适合对接手机的功能，国内下载速度也很快。由于fir.im提供了比较方便的CLI工具，因此本文以fir.im为例，在<code>.travis.yml</code>中添加以下几行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">before_install:</div><div class="line">- gem install fir-cli</div><div class="line">after_deploy:</div><div class="line">- fir p app/build/outputs/apk/app-release.apk -T $FIR_TOKEN -c &quot;`git cat-file tag $TRAVIS_TAG`&quot;</div></pre></td></tr></table></figure></p>
<p>即在环境构建阶段安装fir-cli，在发布成功后通过fir命令行工具将apk上传到fir。</p>
<p>其中<code>$FIR_TOKEN</code>可以在fir.im的用户-&gt;API Token中找到，然后在Travis CI控制台中创建环境变量<code>FIR_TOKEN</code>并粘贴即可。</p>
<p>这里有个小技巧，如果我们仅仅上传APK文件到fir.im，看到链接的测试人员其实并不知道这次发布所包含的变动，因此通过<code>git cat-file tag $TRAVIS_TAG</code>将当前发布tag所包含的附加信息一同上传了。其中<code>$TRAVIS_TAG</code>变量是Travis CI每次运行自动附带的环境变量，还有很多其他的<a href="https://docs.travis-ci.com/user/environment-variables/" target="_blank" rel="external">Travis环境变量</a>供我们玩出更多花样。</p>
<h2 id="发布完毕后自动发邮件通知"><a href="#发布完毕后自动发邮件通知" class="headerlink" title="发布完毕后自动发邮件通知"></a>发布完毕后自动发邮件通知</h2><p>然Travis CI也有通知功能，但不能定制模板，通知内容也仅仅为提示CI运行的结果，显然更适合开发人员。我们还是希望最终能以更友好的方式通知团队成员，同时考虑到邮件送达率，可以优先选择如Submail、SendCloud等国内邮件发送服务。</p>
<p>这里以Submail为例，首先需要在Submail内创建邮件模板，比如我们可以创建这样一封触发式邮件模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Hi 亲</div><div class="line"></div><div class="line">@var(TRAVIS_REPO_SLUG)新版本@var(TRAVIS_TAG)已经发布了，功能更新：</div><div class="line"></div><div class="line">@var(TAG_DESCRIPTION)</div><div class="line"></div><div class="line">去下载：</div><div class="line">http://fir.im/w13s</div></pre></td></tr></table></figure></p>
<p>创建后可以得到邮件模板id，根据Submail手册，将模板中所需要的变量置入，最终可以使用一行Curl指令发送一封邮件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">after_deploy:- curl -d &quot;appid=10948&amp;to=allo.vince@gmail.com&amp;subject=[自动通知] 安卓新版本$TRAVIS_TAG发布&amp;project=u2c0r2&amp;signature=$SUBMAIL_SIGN&amp;vars=&#123;\&quot;TRAVIS_REPO_SLUG\&quot;:\&quot;$TRAVIS_REPO_SLUG\&quot;,\&quot;TRAVIS_TAG\&quot;:\&quot;$TRAVIS_TAG\&quot;,\&quot;TAG_DESCRIPTION\&quot;:\&quot;$(git cat-file tag $TRAVIS_TAG | awk 1 ORS=&apos;&lt;br&gt;&apos;)\&quot;&#125;&quot; https://api.submail.cn/mail/xsend.json</div></pre></td></tr></table></figure></p>
<p>其中Submail用到的认证凭据signature同样是通过Travis CI控制台配置的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最终完成的示例项目在此。其实所有的yml文件配置不到30行，就能省去繁琐的日常工作，何乐而不为呢。最后回顾一下自动化后的日常工作：<br>提交代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;这里是注释&quot;</div><div class="line">git push origin</div></pre></td></tr></table></figure></p>
<p>打Tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag -a v0.0.1-alpha.1 -m &quot;这里是Tag注释，说清楚这个版本的主要改动，也可以省略-m参数直接写长文本&quot;</div><div class="line">git push origin --tags</div></pre></td></tr></table></figure></p>
<p>如果发现打错了tag，可以删除本地及远程tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag -d v0.0.1-alpha.1</div><div class="line">git push origin --delete tag v0.0.1-alpha.1</div></pre></td></tr></table></figure></p>
<p>大部分Tag标签虽然仅用于内测，但是仍然建议遵循<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">版本语义化原则</a>。</p>
<p>参考资料</p>
<ul>
<li>(基于Travis CI搭建Android自动打包发布工作流（支持Github Release及fir.im）)[<a href="http://avnpc.com/pages/android-auto-deploy-workflow-on-travis-ci" target="_blank" rel="external">http://avnpc.com/pages/android-auto-deploy-workflow-on-travis-ci</a>]</li>
<li><a href="http://www.jianshu.com/p/6dba7d6f79ff" target="_blank" rel="external">fir weekly -「 持续集成 」实践教程合集</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;未自动化前安卓开发总是避免不了这样的工作流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发一些新功能，提交代码&lt;/li&gt;
&lt;li&gt;完成一部分功能后，打包一个测试版APK&lt;/li&gt;
&lt;li&gt;将测试版APK上传到QQ群 / 网盘 / Fir.im / 蒲公英等&lt;/li&gt;
&lt;li&gt;在QQ群或发布平台解释当前版本所完成的功能&lt;/li&gt;
&lt;li&gt;通知测试人员测试&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实现了这套自动化发布后，工作流程被简化成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发新功能，提交代码&lt;/li&gt;
&lt;li&gt;通过git tag对代码打一个内测版的tag，&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tag提交后Travis CI会自动编译代码，生成APK文件并分发到Github和fir.im，Github和fir.im中会保持Tag的描述信息，分发完成后会有邮件通知所有参与测试的人员。而作为开发人员，只需要专注于对代码打好一个Tag就可以了。&lt;/p&gt;
&lt;p&gt;整个流程看似做了不少工作，其实体现在Travis CI只有数行指令而已，以下逐一讲解：&lt;/p&gt;
    
    </summary>
    
      <category term="android" scheme="https://carrie1217.github.io/categories/android/"/>
    
    
      <category term="Travis-CI" scheme="https://carrie1217.github.io/tags/Travis-CI/"/>
    
  </entry>
  
  <entry>
    <title>获取屏幕原始高度</title>
    <link href="https://carrie1217.github.io/2016/12/02/%E8%8E%B7%E5%8F%96%E5%B1%8F%E5%B9%95%E5%8E%9F%E5%A7%8B%E9%AB%98%E5%BA%A6(%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98)/"/>
    <id>https://carrie1217.github.io/2016/12/02/获取屏幕原始高度(工作中遇到的问题)/</id>
    <published>2016-12-02T08:39:19.000Z</published>
    <updated>2016-12-06T02:15:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>android带有虚拟键的手机， 获取屏幕宽度默认不包含虚拟键的高度，以下代码是获取屏幕原始高度。</p>
<a id="more"></a>
<h4 id="获取屏幕原始高度"><a href="#获取屏幕原始高度" class="headerlink" title="获取屏幕原始高度"></a>获取屏幕原始高度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static int getDpi(Context context)&#123;</div><div class="line">    int dpi = 0;</div><div class="line">    WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</div><div class="line">    Display display = windowManager.getDefaultDisplay();</div><div class="line">    DisplayMetrics displayMetrics = new DisplayMetrics();</div><div class="line">    @SuppressWarnings(&quot;rawtypes&quot;)</div><div class="line">    Class c;</div><div class="line">    try &#123;</div><div class="line">        c = Class.forName(&quot;android.view.Display&quot;);</div><div class="line">        @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">        Method method = c.getMethod(&quot;getRealMetrics&quot;,DisplayMetrics.class);</div><div class="line">        method.invoke(display, displayMetrics);</div><div class="line">        dpi=displayMetrics.heightPixels;</div><div class="line">    &#125;catch(Exception e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    return dpi;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>华为等带有虚拟键的手机，如下代码获取的屏幕高度不包含虚拟键盘的高度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static int getScreenHeight(Activity activity) &#123;</div><div class="line">       DisplayMetrics metric = new DisplayMetrics();</div><div class="line">       activity.getWindowManager().getDefaultDisplay().getMetrics(metric);</div><div class="line">       return metric.heightPixels;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;android带有虚拟键的手机， 获取屏幕宽度默认不包含虚拟键的高度，以下代码是获取屏幕原始高度。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://carrie1217.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 中显示资源库（Library）文件夹目录的几种方法</title>
    <link href="https://carrie1217.github.io/2016/11/28/mac_library_show_hide/"/>
    <id>https://carrie1217.github.io/2016/11/28/mac_library_show_hide/</id>
    <published>2016-11-28T09:02:10.000Z</published>
    <updated>2016-12-06T02:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac中Library目录在10.6.7系统之后默认隐藏的，要想找到此文件夹有如下几种方法：</p>
<ul>
<li>用命令可以使其显示**</li>
</ul>
<blockquote>
<p>在终端中执行命令：</p>
<p>chflags nohidden ~/Library</p>
<p>可显示资源库文件夹</p>
<p>如想隐藏，可以在终端中执行命令：</p>
<p>chflags hidden ~/Library  </p>
</blockquote>
<a id="more"></a>
<ul>
<li>在<strong>Finder</strong>菜单中的<strong>偏好设置</strong>中设置</li>
</ul>
<blockquote>
<p>在Finder菜单中的<strong>偏好设置</strong>中选择<strong>边栏</strong>，勾选上<strong>设备</strong>中的<strong>硬盘</strong>。</p>
<p>再打开Finder，Finder的<strong>左边栏</strong>会有<strong>设备</strong>显示，在这里可以找到用户下的资源库也可以找到系统下的资源库文件目录了。</p>
<p>想要隐藏，去掉Finder偏好设置中边栏选项设备中的硬盘勾选或着直接在Finder的左边栏上设备出悬浮鼠标会出现隐藏，直接隐藏即可。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac中Library目录在10.6.7系统之后默认隐藏的，要想找到此文件夹有如下几种方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用命令可以使其显示**&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在终端中执行命令：&lt;/p&gt;
&lt;p&gt;chflags nohidden ~/Library&lt;/p&gt;
&lt;p&gt;可显示资源库文件夹&lt;/p&gt;
&lt;p&gt;如想隐藏，可以在终端中执行命令：&lt;/p&gt;
&lt;p&gt;chflags hidden ~/Library  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="mac" scheme="https://carrie1217.github.io/categories/mac/"/>
    
    
      <category term="Mac" scheme="https://carrie1217.github.io/tags/Mac/"/>
    
      <category term="Library" scheme="https://carrie1217.github.io/tags/Library/"/>
    
  </entry>
  
  <entry>
    <title>TimerTask更新UI</title>
    <link href="https://carrie1217.github.io/2016/11/24/TimerTask%E6%9B%B4%E6%96%B0UI%E7%BA%BF%E7%A8%8B/"/>
    <id>https://carrie1217.github.io/2016/11/24/TimerTask更新UI线程/</id>
    <published>2016-11-24T02:41:59.000Z</published>
    <updated>2016-12-06T02:30:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天犯了一个低级的错误，在TimerTask任务里执行activity跳转，导致activity切入动画无效。查阅相关资料，有以下两种方法更新UI</p>
<a id="more"></a>
<h1 id="TimerTask-更新UI线程"><a href="#TimerTask-更新UI线程" class="headerlink" title="TimerTask 更新UI线程"></a>TimerTask 更新UI线程</h1><h3 id="1-交由UI-Thread处理"><a href="#1-交由UI-Thread处理" class="headerlink" title="1.交由UI Thread处理"></a>1.交由UI Thread处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">TimerTask task = new TimerTask()&#123;  </div><div class="line">       public void run() &#123;  </div><div class="line">            runOnUiThread(new Runnable()&#123;  </div><div class="line">            @Override  </div><div class="line">            public void run() &#123;  </div><div class="line">                // 执行ui更新 </div><div class="line">            &#125;&#125;);  </div><div class="line">	   &#125;  </div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<h3 id="2-由Handler处理UI-更新。"><a href="#2-由Handler处理UI-更新。" class="headerlink" title="2.由Handler处理UI　更新。"></a>2.由Handler处理UI　更新。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">TimerTask task = new TimerTask()&#123;  </div><div class="line">       public void run() &#123;  </div><div class="line">          	Message message = new Message(); </div><div class="line">            message.what = 1;</div><div class="line">            handler.sendMessage(message);       </div><div class="line">	   &#125;  </div><div class="line"> &#125;;  </div><div class="line"> </div><div class="line"> </div><div class="line"> Handler handler = new Handler()&#123;     </div><div class="line">    </div><div class="line">        public void handleMessage(Message msg) &#123;     </div><div class="line">            switch (msg.what) &#123;         </div><div class="line">            case 1:         </div><div class="line">                // 执行ui更新 </div><div class="line">                break;         </div><div class="line">            &#125;         </div><div class="line">            super.handleMessage(msg);     </div><div class="line">    &#125;            </div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天犯了一个低级的错误，在TimerTask任务里执行activity跳转，导致activity切入动画无效。查阅相关资料，有以下两种方法更新UI&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://carrie1217.github.io/categories/Android/"/>
    
    
      <category term="TimerTask" scheme="https://carrie1217.github.io/tags/TimerTask/"/>
    
      <category term="Timer" scheme="https://carrie1217.github.io/tags/Timer/"/>
    
  </entry>
  
  <entry>
    <title>Spannable的用法</title>
    <link href="https://carrie1217.github.io/2016/11/22/spannable/"/>
    <id>https://carrie1217.github.io/2016/11/22/spannable/</id>
    <published>2016-11-22T03:17:33.000Z</published>
    <updated>2016-12-05T10:44:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spannable继承自Spanned接口，而实际上，Spanned继承自CharSequence接口。<br>在TextView的<code>setText(CharSequence text)</code>方法中，要求的参数正好是一个CharSequence对象，因此，我们可以通过Spannable对象来直接使用setText来完成文本的设置。在使用中通常使用<code>Spannable spn = new SpannableString(&quot;字符串&quot;)</code>;或者通过SpannableStringBuilder对象来进行构建。<br>在构建除了Spannable对象以后，就可以使用<code>spannable.setSpan(Obj what, int start, int end, int flags)</code>方法来进行样式的设置了，其中参数what是具体样式的实现对象，start则是该样式开始的位置，end对应的是样式结束的位置，参数flags，定义在Spannable中的常量，常用的有：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Spanned.SPAN_EXCLUSIVE_EXCLUSIVE --- 不包含两端start和end所在的端点        (a,b)</div><div class="line">Spanned.SPAN_EXCLUSIVE_INCLUSIVE --- 不包含端start，但包含end所在的端点     (a,b]</div><div class="line">Spanned.SPAN_INCLUSIVE_EXCLUSIVE --- 包含两端start，但不包含end所在的端点   [a,b)</div><div class="line">Spanned.SPAN_INCLUSIVE_INCLUSIVE --- 包含两端start和end所在的端点          [a,b]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Spanned.SPAN_EXCLUSIVE_EXCLUSIVE --- 不包含两端start和end所在的端点        (a,b)</div><div class="line">Spanned.SPAN_EXCLUSIVE_INCLUSIVE --- 不包含端start，但包含end所在的端点     (a,b]</div><div class="line">Spanned.SPAN_INCLUSIVE_EXCLUSIVE --- 包含两端start，但不包含end所在的端点   [a,b)</div><div class="line">Spanned.SPAN_INCLUSIVE_INCLUSIVE --- 包含两端start和end所在的端点          [a,b]</div></pre></td></tr></table></figure>
<p>在TextView的<code>setText(CharSequence text)</code>方法中，要求的参数正好是一个CharSequence对象，因此，我们可以通过Spannable对象来直接使用setText来完成文本的设置。在使用中通常使用<code>Spannable spn = new SpannableString(&quot;字符串&quot;)</code>;或者通过SpannableStringBuilder对象来进行构建。<br>在构建除了Spannable对象以后，就可以使用<code>spannable.setSpan(Obj what, int start, int end, int flags)</code>方法来进行样式的设置了，其中参数what是具体样式的实现对象，start则是该样式开始的位置，end对应的是样式结束的位置，参数flags，定义在Spannable中的常量，常用的有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Spanned.SPAN_EXCLUSIVE_EXCLUSIVE --- 不包含两端start和end所在的端点        (a,b)</div><div class="line">Spanned.SPAN_EXCLUSIVE_INCLUSIVE --- 不包含端start，但包含end所在的端点     (a,b]</div><div class="line">Spanned.SPAN_INCLUSIVE_EXCLUSIVE --- 包含两端start，但不包含end所在的端点   [a,b)</div><div class="line">Spanned.SPAN_INCLUSIVE_INCLUSIVE --- 包含两端start和end所在的端点          [a,b]</div></pre></td></tr></table></figure>
<!--more-->
<h2 id="Spannable的用法"><a href="#Spannable的用法" class="headerlink" title="Spannable的用法"></a>Spannable的用法</h2><h4 id="第一个参数传入一个样式，样式种类如下："><a href="#第一个参数传入一个样式，样式种类如下：" class="headerlink" title="第一个参数传入一个样式，样式种类如下："></a>第一个参数传入一个样式，样式种类如下：</h4><ol>
<li>AbsoluteSizeSpan  指定文字大小</li>
<li>TypefaceSpan  可以设置不同的字体</li>
<li>AlignmentSpan.Standard  标准文本对齐</li>
<li>BackgroundColorSpan  文本背景颜色</li>
<li>ForegroundColorSpan  文字字体颜色</li>
<li>LeadingMarginSpan  文本缩进</li>
<li>TabStopSpan  制表位偏移样式</li>
<li>TextAppearanceSpan  使用style文件来定义文本样式</li>
<li>RelativeSizeSpan  对于文本设定的大小的相对比例</li>
<li>ScaleXSpan  将字体按比例进行横向缩放</li>
<li>URLSpan  可以打开一个链接</li>
<li>StyleSpan  正常、粗体、斜体和同时加粗倾斜四种样式</li>
<li>StrikethroughSpan  删除线样式</li>
<li>QuoteSpan  在文本左侧添加一条表示引用的竖线</li>
<li>UnderlineSpan  给一段文字加上下划线</li>
<li>SubscriptSpan  脚注样式，比如化学式的常见写法</li>
<li>SuperscriptSpan  上标样式，比如数学上的次方运算</li>
<li>BulletSpan  文本着重样式，类似于HTML中的</li>
<li>标签的圆点效果</li>
<li>DrawableMarginSpan 、IconMarginSpan  图片+Margin样式</li>
<li>ImageSpan  图片样式，主要用于在文本中插入图片  聊天中的emoji表情显示用的就是这个</li>
<li>MaskFilterSpan  文本滤镜  目前只有模糊效果和浮雕效果</li>
<li>RasterizerSpan  光栅化</li>
</ol>
<h4 id="通过这种方式，示例如下："><a href="#通过这种方式，示例如下：" class="headerlink" title="通过这种方式，示例如下："></a>通过这种方式，示例如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public static SpannableStringBuilder addQuoteSpannableStr(String resoneStr)&#123;</div><div class="line">    SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder(&quot;“&quot; + resoneStr + &quot;”&quot;);</div><div class="line">    int length = spannableStringBuilder.length();</div><div class="line"></div><div class="line">    spannableStringBuilder.setSpan(new AbsoluteSizeSpan(DensityUtil.dip2px(17)), 0, 1, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">    spannableStringBuilder.setSpan(new AbsoluteSizeSpan(DensityUtil.dip2px(15)), 1, length - 1, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">    spannableStringBuilder.setSpan(new AbsoluteSizeSpan(DensityUtil.dip2px(17)), length - 1, length, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line"></div><div class="line">    spannableStringBuilder.setSpan(new ForegroundColorSpan(ResourceUtil.getColor(R.color.ab_life_feed_item_recommend_quote)), 0, 1, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">    spannableStringBuilder.setSpan(new ForegroundColorSpan(ResourceUtil.getColor(R.color.ab_life_feed_item_recommend_resone)), 1, length - 1, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">    spannableStringBuilder.setSpan(new ForegroundColorSpan(ResourceUtil.getColor(R.color.ab_life_feed_item_recommend_quote)), length - 1, length, Spanned.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">    return spannableStringBuilder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加emoji代码"><a href="#添加emoji代码" class="headerlink" title="添加emoji代码"></a>添加emoji代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static void convert2RichText(String text, Spannable spannable, float scaleRate) &#123;</div><div class="line">    Pattern pattern = Pattern.compile(&quot;\\[([0-9]+)\\]&quot;);</div><div class="line">    Matcher matcher = pattern.matcher(text);</div><div class="line">    while (matcher.find()) &#123;</div><div class="line">        String emojiId = matcher.group(1);</div><div class="line">        System.out.println(&quot;emojiId:&quot; + emojiId);</div><div class="line">        if (EMOJI_MAP.containsKey(emojiId)) &#123;</div><div class="line">            Drawable drawable = getEmojiDrawable(context, emojiId, scaleRate);</div><div class="line">            int imageStartIndex = matcher.start();</div><div class="line">            int imageEndIndex = matcher.end();</div><div class="line">            ImageSpan span = new ImageSpan(drawable, ImageSpan.ALIGN_BOTTOM);</div><div class="line">            spannable.setSpan(span, imageStartIndex, imageEndIndex, Spannable.SPAN_INCLUSIVE_EXCLUSIVE);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spannable继承自Spanned接口，而实际上，Spanned继承自CharSequence接口。&lt;br&gt;在TextView的&lt;code&gt;setText(CharSequence text)&lt;/code&gt;方法中，要求的参数正好是一个CharSequence对象，因此，我们可以通过Spannable对象来直接使用setText来完成文本的设置。在使用中通常使用&lt;code&gt;Spannable spn = new SpannableString(&amp;quot;字符串&amp;quot;)&lt;/code&gt;;或者通过SpannableStringBuilder对象来进行构建。&lt;br&gt;在构建除了Spannable对象以后，就可以使用&lt;code&gt;spannable.setSpan(Obj what, int start, int end, int flags)&lt;/code&gt;方法来进行样式的设置了，其中参数what是具体样式的实现对象，start则是该样式开始的位置，end对应的是样式结束的位置，参数flags，定义在Spannable中的常量，常用的有：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://carrie1217.github.io/categories/Android/"/>
    
    
      <category term="Spannable" scheme="https://carrie1217.github.io/tags/Spannable/"/>
    
  </entry>
  
</feed>
